#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chat-app:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var mongoDB=require('../config/db');
var mongoose = require('mongoose');



//Initilize Socket Connection
var io = require('socket.io')(server);



io.on('connection', function(socket){
  console.log('socket connected',io.sockets.adapter.rooms);
  
//socket disconnected
  socket.on('disconnect',function(){
      console.log('user left',socket.id);
      //tell all clients that user disconnected(io means overall server)
      socket.broadcast.emit('user left',socket.id);

  });

	

  //tell all clients that user connected(io means overall server)
  io.emit('user joined',socket.id)

  //client sends message
  socket.on('chat.message',function(message){
    console.log('server message',message)
    //emit this event to all clients
    io.emit('chat.message',message);

  });

  socket.on('user typing',function(){

  });

	

});	

  
  

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
