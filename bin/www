#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chat-app:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var mongoDB=require('../config/db');
var mongoose = require('mongoose');
var connections=[],users={},names={};
var socketMapping={};

//Initilize Socket Connection
var io = require('socket.io')(server);


io.on('connection', function(socket){
   connections.push[socket.id];
  console.log('socket connected',connections.length);
   

  //tell all clients that user connected(io means overall server)
 
  //if server emits user joined,update online users array
   socket.on('user joined',function(user){
          console.log('a user connected',user)
           socketMapping[user.id]=socket.id;

          if(users[user.id] == undefined){
             users[user.id]=user.username;
          }
        
         socket.userId=user.id;
         socket.username=user.username;
         console.log(socket.userId+' '+socket.username);
         names[socket.userId]={
             name:socket.username,
             socketId:socket.id
         }

         socket.join('some room');

         console.log('available users',users);
         io.emit('user joined',user);
         //socket disconnected
        
         updateNames(user);
        
          socket.on('disconnect',function(){
            console.log('user left',user);
            if(!socket.username) return;
            delete names[socket.userId];
           
            //tell all clients that user disconnected(io means overall server)
            socket.broadcast.emit('user left',user);

            updateNames(user);
        });

         

    });

   

  
    function updateNames(user){
            console.log('namesnames',names);
           io.emit('availableusers',names)
    }


   socket.on('chat.message',function(message){
          console.log('server message',message)
          //emit this event to all clients
          // io.emit('chat.message',{message:message,user:socket.username});
            socket.broadcast.to(socketMapping[message.receiver]).emit('chat.message', {message:message,user:socket.username});
          //io.sockets.to(receiver).emit('chat.message', message);
         
   });

  socket.on('user typing',function(username){
     io.emit('user typing',username);

  });

	

});	

  
  

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
